1- JXS -> javascript extension that allows us to put html inside of javascript.
	
	a-some of rules need to follow:
		1- you cant use class attribute insted you should use className.
		2- you can't use for attribute instead you should use htmlFor.
		3- when use a tage without ending tage like input, you need to keep the slash at the end of it 
		<input type='text' /> and not <iput type='text' >
		do <br /> and not <br>.
		4- when return you need to return single parent element aka one div.
		5- all this jxs is instead of:
			return Recat.creatElement(
				'div',
				{className: 'App'},
				React.creatElement('h1', null, 'this is my app')
			);

2- JXS Expressions:
	a- you can add any expression you want over the render word:
		class App extends Component {
  			render() {
    				const name = "shyma";
    				return (
      					<div className="App">
        					<h1>Contact Manager {name}</h1>
      					</div>
    					);
 			 	}
			}

	b- you can add what you want abve the return form javascript logic(if statment ....etc)

3- creat component:

	a- make a folder called component 
	b- add a file to it called Contact.js, notice firs letter is capital since its a subclass
	c- import React, {Component} from 'react'
	d- init the calss:
		class class-name extends Component{
			render(){
				return(

				);
			}
		}
	e- add the export: export default class-name;
	f- go to App.js and import the sub class to it then add its tag in the JXS;



4- Functiona Component: 
	
	a-make Header.js file in the component folder
	b- add the setup to it:
		import React from 'react';

		const Header = () => {
    			return (
        			<div>
            				<h1>Contact Manager</h1>
        			</div>
   			 )
		}

		export default Header;

5-Props:

	a- Short cut for proprties
	b- pass them in the component as attributes, head to App.js and add props:
		<Contact value="contact manager" />
	c- go to the Contact sub class and pass props in the class as following:
		class Contact extends Component {
    			render(props) {
       				 // object deconstruction 
       				 const {name, email, phone} = this.props;
        				return (
            					<div>
                					<h4>{name}</h4>
                					<ul>
                   						 <li>Email: {email}</li>
                   						 <li>Phone Number: {phone}</li>
                					</ul>
            					</div>
      					  );
   				 }
			} 
	d- if we have functional component then we call porps as {props.title} 
	e- if we have class component then we call props as {this.props.title}


6- Typechckng with props types:

	a- having default props in case there is no props passing:
		class-name.defaultProps = {
			title: 'My App'
		}
	
	b- validate the data thats coming in:
		1- import poprtypes:
			import PropTypes from 'prop-types';

		2- add proptypes outside class (prefered):
			class-name.propTypes = {
   				name: PropTypes.string.isRequired,
    				email: PropTypes.string.isRequired,
    				phone: PropTypes.string.isRequired,
			}

		3- or add it inside the calss:
			class Contact extends Component {

    				static propTypes = {
        				name: PropTypes.string.isRequired,
        				email: PropTypes.string.isRequired,
        				phone: PropTypes.string.isRequired,
    				}
    				render(props) {
        				return (
           					 <div></div>
        				);
    				}
			}

7-Css in React: 
	
	a- inline styling: 
		<h1 style = {{color:'red', fontSize: '50px'}}></h1>
	b- variable Styling:
		1- we put this outside the class:
			const headingStyling = {
				color: 'green',
				fontSize: '50px'
			}
		2- <h1 style = {headingStyling}></h1>
	
	c- specific style sheet for very component:
		1- add a file called contact.css 
		2- then import it 
			import './contact.css'

8- Bootstrap:
	1-download bootstrap: npm install bootstrap
	2- import it in the component: import 'bootstrap/dist/css/bootstrap.min.css';
	3- use calssName and not class alone

9- State:
	a- state works only on class component 

	//TODO

10- changing state froma nother component(from child to parent):
	a- in the childe component add a function:
		<button className="btn btn-danger" onClick={this.onDelete}>Delete Contact</button> 
	b- bind the function in the constructor then call under it 
	c- add it to the props inside the function call:
		onDeleteClick(){
			this.props.deleteClickHandler();
		}
	d- add it to the propTypes:
		class-name.propTypes = {
			deleteClickHandler: propTypes.func.isRequired
		}
	/////////// go th parent now
	a- go to where the child called and add it as a prop
		<Child deleteClickHandler={this.deleteContact}/>
	b- add the function under state upvode render 
	deleteContact(){
		
	}




































































































